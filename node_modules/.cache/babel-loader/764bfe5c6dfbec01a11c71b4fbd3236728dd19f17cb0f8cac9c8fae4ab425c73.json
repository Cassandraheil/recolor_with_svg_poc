{"ast":null,"code":"var _jsxFileName = \"/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [svgElements, setSvgElements] = useState([]); // stores parsed React-friendly SVG elements\n  const [regionColors, setRegionColors] = useState({}); // maps element ids to colors\n  const [selectedId, setSelectedId] = useState(null);\n\n  // Handle SVG Upload & Parse into React elements\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file || !file.type.includes('svg')) {\n      alert('Please upload a valid SVG file');\n      return;\n    }\n    const text = await file.text();\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(text, 'image/svg+xml');\n\n    // Get all shape elements we want to make clickable\n    const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n    const newColors = {};\n    const reactElements = Array.from(shapeElements).map((el, index) => {\n      const id = el.id || `region-${index}`;\n      const fill = el.getAttribute('fill') || '#cccccc';\n      newColors[id] = fill;\n\n      // Save the element type & its attributes\n      return {\n        id,\n        type: el.tagName,\n        props: {\n          ...Object.fromEntries(Array.from(el.attributes).map(a => [a.name, a.value]))\n        }\n      };\n    });\n    setSvgElements(reactElements);\n    setRegionColors(newColors);\n    setSelectedId(null);\n  };\n\n  // Change selected region's color\n  const changeColor = color => {\n    if (!selectedId) return;\n    setRegionColors(prev => ({\n      ...prev,\n      [selectedId]: color\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: 'center',\n      padding: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SVG Recoloring (React Way)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".svg\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), svgElements.length > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 300 300\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        border: '1px solid #ccc',\n        marginTop: '1rem',\n        width: 300,\n        height: 300\n      },\n      children: svgElements.map(({\n        id,\n        type,\n        props\n      }) => {\n        const Tag = type; // path, rect, etc.\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          ...props,\n          id: id,\n          fill: regionColors[id],\n          stroke: selectedId === id ? 'black' : props.stroke,\n          strokeWidth: selectedId === id ? 2 : props.strokeWidth,\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => setSelectedId(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), selectedId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected: \", selectedId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '0.5rem'\n        },\n        children: ['#f87171', '#60a5fa', '#34d399', '#fbbf24', '#a78bfa'].map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeColor(color),\n          style: {\n            width: 40,\n            height: 40,\n            backgroundColor: color,\n            border: '1px solid #333',\n            cursor: 'pointer'\n          }\n        }, color, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fBNi1Se8O/YjtyG0XCr3twJGCV4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","svgElements","setSvgElements","regionColors","setRegionColors","selectedId","setSelectedId","handleFileUpload","event","_event$target$files","file","target","files","type","includes","alert","text","parser","DOMParser","doc","parseFromString","shapeElements","querySelectorAll","newColors","reactElements","Array","from","map","el","index","id","fill","getAttribute","tagName","props","Object","fromEntries","attributes","a","name","value","changeColor","color","prev","className","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","length","viewBox","xmlns","border","marginTop","width","height","Tag","stroke","strokeWidth","cursor","onClick","display","justifyContent","gap","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [svgElements, setSvgElements] = useState([]); // stores parsed React-friendly SVG elements\n  const [regionColors, setRegionColors] = useState({}); // maps element ids to colors\n  const [selectedId, setSelectedId] = useState(null);\n\n  // Handle SVG Upload & Parse into React elements\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file || !file.type.includes('svg')) {\n      alert('Please upload a valid SVG file');\n      return;\n    }\n\n    const text = await file.text();\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(text, 'image/svg+xml');\n\n    // Get all shape elements we want to make clickable\n    const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n\n    const newColors = {};\n    const reactElements = Array.from(shapeElements).map((el, index) => {\n      const id = el.id || `region-${index}`;\n      const fill = el.getAttribute('fill') || '#cccccc';\n      newColors[id] = fill;\n\n      // Save the element type & its attributes\n      return {\n        id,\n        type: el.tagName,\n        props: {\n          ...Object.fromEntries(Array.from(el.attributes).map((a) => [a.name, a.value])),\n        },\n      };\n    });\n\n    setSvgElements(reactElements);\n    setRegionColors(newColors);\n    setSelectedId(null);\n  };\n\n  // Change selected region's color\n  const changeColor = (color) => {\n    if (!selectedId) return;\n    setRegionColors((prev) => ({\n      ...prev,\n      [selectedId]: color,\n    }));\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center', padding: '1rem' }}>\n      <h2>SVG Recoloring (React Way)</h2>\n      <input type=\"file\" accept=\".svg\" onChange={handleFileUpload} />\n\n      {/* Render SVG if uploaded */}\n      {svgElements.length > 0 && (\n        <svg\n          viewBox=\"0 0 300 300\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          style={{\n            border: '1px solid #ccc',\n            marginTop: '1rem',\n            width: 300,\n            height: 300,\n          }}\n        >\n          {svgElements.map(({ id, type, props }) => {\n            const Tag = type; // path, rect, etc.\n            return (\n              <Tag\n                key={id}\n                {...props}\n                id={id}\n                fill={regionColors[id]}\n                stroke={selectedId === id ? 'black' : props.stroke}\n                strokeWidth={selectedId === id ? 2 : props.strokeWidth}\n                style={{ cursor: 'pointer' }}\n                onClick={() => setSelectedId(id)}\n              />\n            );\n          })}\n        </svg>\n      )}\n\n      {/* Color Picker Buttons */}\n      {selectedId && (\n        <div style={{ marginTop: '1rem' }}>\n          <p>Selected: {selectedId}</p>\n          <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem' }}>\n            {['#f87171', '#60a5fa', '#34d399', '#fbbf24', '#a78bfa'].map((color) => (\n              <button\n                key={color}\n                onClick={() => changeColor(color)}\n                style={{\n                  width: 40,\n                  height: 40,\n                  backgroundColor: color,\n                  border: '1px solid #333',\n                  cursor: 'pointer',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}