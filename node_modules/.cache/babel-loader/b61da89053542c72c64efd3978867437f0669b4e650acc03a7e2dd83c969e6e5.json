{"ast":null,"code":"var _jsxFileName = \"/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/recolor_with_id.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecolorWithId() {\n  _s();\n  const [svgElements, setSvgElements] = useState([]); // stores parsed React-friendly SVG elements\n  const [regionColors, setRegionColors] = useState({}); // maps element ids to colors\n  const [selectedId, setSelectedId] = useState(null);\n\n  // Handle SVG Upload & Parse into React elements\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file || !file.type.includes('svg')) {\n      alert('Please upload a valid SVG file');\n      return;\n    }\n    const text = await file.text();\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(text, 'image/svg+xml');\n\n    // Get all shape elements we want to make clickable\n    const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n    const newColors = {};\n    const reactElements = Array.from(shapeElements).map((el, index) => {\n      const id = el.id || `region-${index}`;\n      const fill = el.getAttribute('fill') || '#cccccc';\n      newColors[id] = fill;\n\n      // Save the element type & its attributes\n      return {\n        id,\n        type: el.tagName,\n        props: {\n          ...Object.fromEntries(Array.from(el.attributes).map(a => [a.name, a.value]))\n        }\n      };\n    });\n    setSvgElements(reactElements);\n    setRegionColors(newColors);\n    setSelectedId(null);\n  };\n\n  // When you click a region, store its color instead of just its ID\n  const [selectedColor, setSelectedColor] = useState(null);\n  const handleRegionClick = (id, color) => {\n    setSelectedColor(color); // store the color we want to \"bucket fill\"\n  };\n\n  // Change selected region's color\n  const changeColor = newColor => {\n    if (!selectedColor) return;\n    setRegionColors(prev => {\n      const updated = {\n        ...prev\n      };\n      Object.keys(prev).forEach(regionId => {\n        if (prev[regionId] === selectedColor) {\n          updated[regionId] = newColor; // ✅ recolor all matching regions\n        }\n      });\n      return updated;\n    });\n    setSelectedColor(null); // reset after recoloring\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Using Id's\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".svg\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), svgElements.length > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 300 300\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        border: '1px solid #ccc',\n        marginTop: '1rem',\n        width: 300,\n        height: 300\n      },\n      children: svgElements.map(({\n        id,\n        type,\n        props\n      }) => {\n        const Tag = type;\n        const currentColor = regionColors[id];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          ...props,\n          id: id,\n          fill: currentColor,\n          stroke: selectedColor === currentColor ? 'black' : props.stroke // highlight all matching colors\n          ,\n          strokeWidth: selectedColor === currentColor ? 2 : props.strokeWidth,\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => handleRegionClick(id, currentColor)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), selectedId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected: \", selectedId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '0.5rem'\n        },\n        children: ['#f87171', '#D9CAA0', '#34d399', '#fbbf24', '#a78bfa'].map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeColor(color),\n          style: {\n            width: 40,\n            height: 40,\n            backgroundColor: color,\n            border: '1px solid #333',\n            cursor: 'pointer'\n          }\n        }, color, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(RecolorWithId, \"SSUCBN8S5u7CTmdg7rkI0PUF4Ys=\");\n_c = RecolorWithId;\nvar _c;\n$RefreshReg$(_c, \"RecolorWithId\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RecolorWithId","_s","svgElements","setSvgElements","regionColors","setRegionColors","selectedId","setSelectedId","handleFileUpload","event","_event$target$files","file","target","files","type","includes","alert","text","parser","DOMParser","doc","parseFromString","shapeElements","querySelectorAll","newColors","reactElements","Array","from","map","el","index","id","fill","getAttribute","tagName","props","Object","fromEntries","attributes","a","name","value","selectedColor","setSelectedColor","handleRegionClick","color","changeColor","newColor","prev","updated","keys","forEach","regionId","className","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","length","viewBox","xmlns","border","marginTop","width","height","Tag","currentColor","stroke","strokeWidth","cursor","onClick","display","justifyContent","gap","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/recolor_with_id.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport default function RecolorWithId() {\n    const [svgElements, setSvgElements] = useState([]); // stores parsed React-friendly SVG elements\n    const [regionColors, setRegionColors] = useState({}); // maps element ids to colors\n    const [selectedId, setSelectedId] = useState(null);\n\n    // Handle SVG Upload & Parse into React elements\n    const handleFileUpload = async (event) => {\n        const file = event.target.files?.[0];\n        if (!file || !file.type.includes('svg')) {\n            alert('Please upload a valid SVG file');\n            return;\n        }\n\n        const text = await file.text();\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(text, 'image/svg+xml');\n\n        // Get all shape elements we want to make clickable\n        const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n\n        const newColors = {};\n        const reactElements = Array.from(shapeElements).map((el, index) => {\n            const id = el.id || `region-${index}`;\n            const fill = el.getAttribute('fill') || '#cccccc';\n            newColors[id] = fill;\n\n            // Save the element type & its attributes\n            return {\n                id,\n                type: el.tagName,\n                props: {\n                    ...Object.fromEntries(Array.from(el.attributes).map((a) => [a.name, a.value])),\n                },\n            };\n        });\n\n        setSvgElements(reactElements);\n        setRegionColors(newColors);\n        setSelectedId(null);\n    };\n\n    // When you click a region, store its color instead of just its ID\n    const [selectedColor, setSelectedColor] = useState(null);\n\n    const handleRegionClick = (id, color) => {\n        setSelectedColor(color); // store the color we want to \"bucket fill\"\n    };\n\n    // Change selected region's color\n    const changeColor = (newColor) => {\n        if (!selectedColor) return;\n\n        setRegionColors((prev) => {\n            const updated = { ...prev };\n            Object.keys(prev).forEach((regionId) => {\n                if (prev[regionId] === selectedColor) {\n                    updated[regionId] = newColor; // ✅ recolor all matching regions\n                }\n            });\n            return updated;\n        });\n\n        setSelectedColor(null); // reset after recoloring\n    };\n\n    return (\n        <div className=\"App\" style={{ textAlign: 'center' }}>\n            <h2>Using Id's</h2>\n            <input type=\"file\" accept=\".svg\" onChange={handleFileUpload} />\n\n            {/* Render SVG if uploaded */}\n            {svgElements.length > 0 && (\n                <svg\n                    viewBox=\"0 0 300 300\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    style={{\n                        border: '1px solid #ccc',\n                        marginTop: '1rem',\n                        width: 300,\n                        height: 300,\n                    }}\n                >\n                    {svgElements.map(({ id, type, props }) => {\n                        const Tag = type;\n                        const currentColor = regionColors[id];\n                        return (\n                            <Tag\n                                key={id}\n                                {...props}\n                                id={id}\n                                fill={currentColor}\n                                stroke={selectedColor === currentColor ? 'black' : props.stroke} // highlight all matching colors\n                                strokeWidth={selectedColor === currentColor ? 2 : props.strokeWidth}\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => handleRegionClick(id, currentColor)}\n                            />\n                        );\n                    })}\n                </svg>\n            )}\n\n            {/* Color Picker Buttons */}\n            {selectedId && (\n                <div style={{ marginTop: '1rem' }}>\n                    <p>Selected: {selectedId}</p>\n                    <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem' }}>\n                        {['#f87171', '#D9CAA0', '#34d399', '#fbbf24', '#a78bfa'].map((color) => (\n                            <button\n                                key={color}\n                                onClick={() => changeColor(color)}\n                                style={{\n                                    width: 40,\n                                    height: 40,\n                                    backgroundColor: color,\n                                    border: '1px solid #333',\n                                    cursor: 'pointer',\n                                }}\n                            />\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}