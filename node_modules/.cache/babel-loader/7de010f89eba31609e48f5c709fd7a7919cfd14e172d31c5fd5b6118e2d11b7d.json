{"ast":null,"code":"var _jsxFileName = \"/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [svgElements, setSvgElements] = useState([]);\n  const [regionColors, setRegionColors] = useState({});\n  const [originalColors, setOriginalColors] = useState({});\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  // ✅ Parse uploaded SVG into React-friendly elements\n  const handleSVGUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file || !file.type.includes('svg')) {\n      alert('Please upload a valid SVG file');\n      return;\n    }\n    const text = await file.text();\n    parseSVGString(text);\n  };\n  const parseSVGString = svgString => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgString, 'image/svg+xml');\n    const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n    const newRegionColors = {};\n    const newOriginalColors = {};\n    const reactElements = Array.from(shapeElements).map((el, index) => {\n      const id = el.id || `region-${index}`;\n      const fill = el.getAttribute('fill') || '#cccccc';\n      newRegionColors[id] = fill; // current colors\n      newOriginalColors[id] = fill; // ✅ store original color permanently\n\n      return {\n        id,\n        type: el.tagName,\n        props: {\n          ...Object.fromEntries(Array.from(el.attributes).map(a => [a.name, a.value]))\n        }\n      };\n    });\n    setSvgElements(reactElements);\n    setRegionColors(newRegionColors);\n    setOriginalColors(newOriginalColors);\n    setSelectedColor(null);\n  };\n\n  // ✅ When clicking a region, group by original color\n  const handleRegionClick = id => {\n    setSelectedColor(originalColors[id]);\n  };\n\n  // ✅ Change all regions that originally shared the selected color\n  const changeColor = newColor => {\n    if (!selectedColor) return;\n    setRegionColors(prev => {\n      const updated = {\n        ...prev\n      };\n      Object.keys(prev).forEach(regionId => {\n        if (originalColors[regionId] === selectedColor) {\n          updated[regionId] = newColor;\n        }\n      });\n      return updated;\n    });\n    setSelectedColor(null); // reset after change\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: 'center',\n      padding: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SVG Recoloring (Grouped by Original Color)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".svg\",\n      onChange: handleSVGUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), svgElements.length > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 300 300\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        border: '1px solid #ccc',\n        marginTop: '1rem',\n        width: 300,\n        height: 300\n      },\n      children: svgElements.map(({\n        id,\n        type,\n        props\n      }) => {\n        const Tag = type;\n        const currentColor = regionColors[id];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          ...props,\n          id: id,\n          fill: currentColor,\n          stroke: selectedColor === originalColors[id] ? 'black' : props.stroke,\n          strokeWidth: selectedColor === originalColors[id] ? 2 : props.strokeWidth,\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => handleRegionClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), selectedColor && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected original color: \", selectedColor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '0.5rem'\n        },\n        children: ['#f87171', '#60a5fa', '#34d399', '#fbbf24', '#a78bfa'].map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeColor(color),\n          style: {\n            width: 40,\n            height: 40,\n            backgroundColor: color,\n            border: selectedColor === color ? '2px solid black' : '1px solid #333',\n            cursor: 'pointer'\n          }\n        }, color, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"w3vyYiAt/Ca8yZrvRsCxA1UiHKM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","svgElements","setSvgElements","regionColors","setRegionColors","originalColors","setOriginalColors","selectedColor","setSelectedColor","handleSVGUpload","event","_event$target$files","file","target","files","type","includes","alert","text","parseSVGString","svgString","parser","DOMParser","doc","parseFromString","shapeElements","querySelectorAll","newRegionColors","newOriginalColors","reactElements","Array","from","map","el","index","id","fill","getAttribute","tagName","props","Object","fromEntries","attributes","a","name","value","handleRegionClick","changeColor","newColor","prev","updated","keys","forEach","regionId","className","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","length","viewBox","xmlns","border","marginTop","width","height","Tag","currentColor","stroke","strokeWidth","cursor","onClick","display","justifyContent","gap","color","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/cassandraheil/Desktop/practice_files/recolor_with_svg_poc/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [svgElements, setSvgElements] = useState([]);\n  const [regionColors, setRegionColors] = useState({});\n  const [originalColors, setOriginalColors] = useState({});\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  // ✅ Parse uploaded SVG into React-friendly elements\n  const handleSVGUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file || !file.type.includes('svg')) {\n      alert('Please upload a valid SVG file');\n      return;\n    }\n\n    const text = await file.text();\n    parseSVGString(text);\n  };\n\n  const parseSVGString = (svgString) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgString, 'image/svg+xml');\n    const shapeElements = doc.querySelectorAll('path, rect, circle, polygon');\n\n    const newRegionColors = {};\n    const newOriginalColors = {};\n\n    const reactElements = Array.from(shapeElements).map((el, index) => {\n      const id = el.id || `region-${index}`;\n      const fill = el.getAttribute('fill') || '#cccccc';\n\n      newRegionColors[id] = fill;   // current colors\n      newOriginalColors[id] = fill; // ✅ store original color permanently\n\n      return {\n        id,\n        type: el.tagName,\n        props: {\n          ...Object.fromEntries(Array.from(el.attributes).map((a) => [a.name, a.value])),\n        },\n      };\n    });\n\n    setSvgElements(reactElements);\n    setRegionColors(newRegionColors);\n    setOriginalColors(newOriginalColors);\n    setSelectedColor(null);\n  };\n\n  // ✅ When clicking a region, group by original color\n  const handleRegionClick = (id) => {\n    setSelectedColor(originalColors[id]);\n  };\n\n  // ✅ Change all regions that originally shared the selected color\n  const changeColor = (newColor) => {\n    if (!selectedColor) return;\n\n    setRegionColors((prev) => {\n      const updated = { ...prev };\n      Object.keys(prev).forEach((regionId) => {\n        if (originalColors[regionId] === selectedColor) {\n          updated[regionId] = newColor;\n        }\n      });\n      return updated;\n    });\n\n    setSelectedColor(null); // reset after change\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center', padding: '1rem' }}>\n      <h2>SVG Recoloring (Grouped by Original Color)</h2>\n\n      {/* File Upload */}\n      <input type=\"file\" accept=\".svg\" onChange={handleSVGUpload} />\n\n      {/* Render SVG */}\n      {svgElements.length > 0 && (\n        <svg\n          viewBox=\"0 0 300 300\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          style={{\n            border: '1px solid #ccc',\n            marginTop: '1rem',\n            width: 300,\n            height: 300,\n          }}\n        >\n          {svgElements.map(({ id, type, props }) => {\n            const Tag = type;\n            const currentColor = regionColors[id];\n            return (\n              <Tag\n                key={id}\n                {...props}\n                id={id}\n                fill={currentColor}\n                stroke={selectedColor === originalColors[id] ? 'black' : props.stroke}\n                strokeWidth={selectedColor === originalColors[id] ? 2 : props.strokeWidth}\n                style={{ cursor: 'pointer' }}\n                onClick={() => handleRegionClick(id)}\n              />\n            );\n          })}\n        </svg>\n      )}\n\n      {/* Color Picker Buttons */}\n      {selectedColor && (\n        <div style={{ marginTop: '1rem' }}>\n          <p>Selected original color: {selectedColor}</p>\n          <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem' }}>\n            {['#f87171', '#60a5fa', '#34d399', '#fbbf24', '#a78bfa'].map((color) => (\n              <button\n                key={color}\n                onClick={() => changeColor(color)}\n                style={{\n                  width: 40,\n                  height: 40,\n                  backgroundColor: color,\n                  border:\n                    selectedColor === color ? '2px solid black' : '1px solid #333',\n                  cursor: 'pointer',\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMa,eAAe,GAAG,MAAOC,KAAK,IAAK;IAAA,IAAAC,mBAAA;IACvC,MAAMC,IAAI,IAAAD,mBAAA,GAAGD,KAAK,CAACG,MAAM,CAACC,KAAK,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;IACpC,IAAI,CAACC,IAAI,IAAI,CAACA,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MACvCC,KAAK,CAAC,gCAAgC,CAAC;MACvC;IACF;IAEA,MAAMC,IAAI,GAAG,MAAMN,IAAI,CAACM,IAAI,CAAC,CAAC;IAC9BC,cAAc,CAACD,IAAI,CAAC;EACtB,CAAC;EAED,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACpC,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,SAAS,EAAE,eAAe,CAAC;IAC9D,MAAMK,aAAa,GAAGF,GAAG,CAACG,gBAAgB,CAAC,6BAA6B,CAAC;IAEzE,MAAMC,eAAe,GAAG,CAAC,CAAC;IAC1B,MAAMC,iBAAiB,GAAG,CAAC,CAAC;IAE5B,MAAMC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACN,aAAa,CAAC,CAACO,GAAG,CAAC,CAACC,EAAE,EAAEC,KAAK,KAAK;MACjE,MAAMC,EAAE,GAAGF,EAAE,CAACE,EAAE,IAAI,UAAUD,KAAK,EAAE;MACrC,MAAME,IAAI,GAAGH,EAAE,CAACI,YAAY,CAAC,MAAM,CAAC,IAAI,SAAS;MAEjDV,eAAe,CAACQ,EAAE,CAAC,GAAGC,IAAI,CAAC,CAAG;MAC9BR,iBAAiB,CAACO,EAAE,CAAC,GAAGC,IAAI,CAAC,CAAC;;MAE9B,OAAO;QACLD,EAAE;QACFpB,IAAI,EAAEkB,EAAE,CAACK,OAAO;QAChBC,KAAK,EAAE;UACL,GAAGC,MAAM,CAACC,WAAW,CAACX,KAAK,CAACC,IAAI,CAACE,EAAE,CAACS,UAAU,CAAC,CAACV,GAAG,CAAEW,CAAC,IAAK,CAACA,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,KAAK,CAAC,CAAC;QAC/E;MACF,CAAC;IACH,CAAC,CAAC;IAEF3C,cAAc,CAAC2B,aAAa,CAAC;IAC7BzB,eAAe,CAACuB,eAAe,CAAC;IAChCrB,iBAAiB,CAACsB,iBAAiB,CAAC;IACpCpB,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;;EAED;EACA,MAAMsC,iBAAiB,GAAIX,EAAE,IAAK;IAChC3B,gBAAgB,CAACH,cAAc,CAAC8B,EAAE,CAAC,CAAC;EACtC,CAAC;;EAED;EACA,MAAMY,WAAW,GAAIC,QAAQ,IAAK;IAChC,IAAI,CAACzC,aAAa,EAAE;IAEpBH,eAAe,CAAE6C,IAAI,IAAK;MACxB,MAAMC,OAAO,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC3BT,MAAM,CAACW,IAAI,CAACF,IAAI,CAAC,CAACG,OAAO,CAAEC,QAAQ,IAAK;QACtC,IAAIhD,cAAc,CAACgD,QAAQ,CAAC,KAAK9C,aAAa,EAAE;UAC9C2C,OAAO,CAACG,QAAQ,CAAC,GAAGL,QAAQ;QAC9B;MACF,CAAC,CAAC;MACF,OAAOE,OAAO;IAChB,CAAC,CAAC;IAEF1C,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEV,OAAA;IAAKwD,SAAS,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACnE5D,OAAA;MAAA4D,QAAA,EAAI;IAA0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGnDhE,OAAA;MAAOiB,IAAI,EAAC,MAAM;MAACgD,MAAM,EAAC,MAAM;MAACC,QAAQ,EAAEvD;IAAgB;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG7D7D,WAAW,CAACgE,MAAM,GAAG,CAAC,iBACrBnE,OAAA;MACEoE,OAAO,EAAC,aAAa;MACrBC,KAAK,EAAC,4BAA4B;MAClCZ,KAAK,EAAE;QACLa,MAAM,EAAE,gBAAgB;QACxBC,SAAS,EAAE,MAAM;QACjBC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE;MACV,CAAE;MAAAb,QAAA,EAEDzD,WAAW,CAAC+B,GAAG,CAAC,CAAC;QAAEG,EAAE;QAAEpB,IAAI;QAAEwB;MAAM,CAAC,KAAK;QACxC,MAAMiC,GAAG,GAAGzD,IAAI;QAChB,MAAM0D,YAAY,GAAGtE,YAAY,CAACgC,EAAE,CAAC;QACrC,oBACErC,OAAA,CAAC0E,GAAG;UAAA,GAEEjC,KAAK;UACTJ,EAAE,EAAEA,EAAG;UACPC,IAAI,EAAEqC,YAAa;UACnBC,MAAM,EAAEnE,aAAa,KAAKF,cAAc,CAAC8B,EAAE,CAAC,GAAG,OAAO,GAAGI,KAAK,CAACmC,MAAO;UACtEC,WAAW,EAAEpE,aAAa,KAAKF,cAAc,CAAC8B,EAAE,CAAC,GAAG,CAAC,GAAGI,KAAK,CAACoC,WAAY;UAC1EpB,KAAK,EAAE;YAAEqB,MAAM,EAAE;UAAU,CAAE;UAC7BC,OAAO,EAAEA,CAAA,KAAM/B,iBAAiB,CAACX,EAAE;QAAE,GAPhCA,EAAE;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQR,CAAC;MAEN,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EAGAvD,aAAa,iBACZT,OAAA;MAAKyD,KAAK,EAAE;QAAEc,SAAS,EAAE;MAAO,CAAE;MAAAX,QAAA,gBAChC5D,OAAA;QAAA4D,QAAA,GAAG,2BAAyB,EAACnD,aAAa;MAAA;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/ChE,OAAA;QAAKyD,KAAK,EAAE;UAAEuB,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,QAAQ;UAAEC,GAAG,EAAE;QAAS,CAAE;QAAAtB,QAAA,EACtE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC1B,GAAG,CAAEiD,KAAK,iBACjEnF,OAAA;UAEE+E,OAAO,EAAEA,CAAA,KAAM9B,WAAW,CAACkC,KAAK,CAAE;UAClC1B,KAAK,EAAE;YACLe,KAAK,EAAE,EAAE;YACTC,MAAM,EAAE,EAAE;YACVW,eAAe,EAAED,KAAK;YACtBb,MAAM,EACJ7D,aAAa,KAAK0E,KAAK,GAAG,iBAAiB,GAAG,gBAAgB;YAChEL,MAAM,EAAE;UACV;QAAE,GATGK,KAAK;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUX,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9D,EAAA,CApIQD,GAAG;AAAAoF,EAAA,GAAHpF,GAAG;AAsIZ,eAAeA,GAAG;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}